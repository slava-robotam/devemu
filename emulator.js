// Generated by CoffeeScript 1.6.3
var Model, System;

Model = (function() {
  function Model() {
    this.va = 0;
    this.v = 0;
    this.angle = 0;
    this.position = [100, 100];
  }

  Model.prototype.velocity = function(v) {
    this.v = v;
  };

  Model.prototype.angular_vel = function(va) {
    this.va = va;
  };

  Model.prototype.setup = function(options) {
    var prop, _results;
    _results = [];
    for (prop in options) {
      _results.push(this[prop] = options[prop]);
    }
    return _results;
  };

  return Model;

})();

System = {
  models: [],
  init: function() {
    return this.container = document.querySelector('.container');
  },
  getModel: function() {
    var model;
    model = new Model();
    model.element = this.getElement();
    this.models.push(model);
    return model;
  },
  getElement: function() {
    var cabin, div;
    div = document.createElement('div');
    div.className = 'model';
    cabin = document.createElement('div');
    cabin.className = 'cabin';
    div.appendChild(cabin);
    this.container.appendChild(div);
    return div;
  },
  run: function() {
    var model, _i, _len, _ref;
    this.time = 0;
    this.step = 1 / 60;
    _ref = this.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      model.init();
    }
    return this.runStep();
  },
  runStep: function() {
    var model, x, y, _i, _len, _ref, _ref1;
    this.time += this.step;
    _ref = this.models;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      model.loop(this.time);
      model.angle += model.va * this.step;
      _ref1 = model.position, x = _ref1[0], y = _ref1[1];
      x += model.v * Math.sin(model.angle) * this.step;
      y -= model.v * Math.cos(model.angle) * this.step;
      model.position = [x, y];
    }
    this.render();
    return requestAnimationFrame(this.runStep.bind(this));
  },
  render: function() {
    var model, _i, _len, _ref, _results;
    _ref = this.models;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      model = _ref[_i];
      model.element.style.webkitTransform = "rotate(" + model.angle + "rad)";
      model.element.style.left = model.position[0] + 'px';
      _results.push(model.element.style.top = model.position[1] + 'px');
    }
    return _results;
  },
  load: function(code) {
    var robot;
    robot = System.getModel();
    eval(code.replace(/loop\(/, "loop_("));
    robot.init = init;
    robot.loop = loop_;
    return System.run();
  },
  translate: function(code) {
    return code;
  }
};

System.init();
